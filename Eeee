local MashUI = {}
MashUI.__index = MashUI

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local function createTween(object, info, properties)
    return TweenService:Create(object, info, properties)
end

local Window = {}
Window.__index = Window

function MashUI:CreateWindow(config)
    local window = setmetatable({}, Window)
    
    config = config or {}
    local title = config.Title or "Mash UI Window"
    local subtitle = config.SubTitle or ""
    local size = config.Size or UDim2.fromOffset(500, 400)
    local theme = config.Theme or "Dark"
    local minimizeKey = config.MinimizeKey or Enum.KeyCode.Q
    
    window.gui = Instance.new("ScreenGui")
    window.gui.Name = "MashUI_" .. title
    window.gui.ResetOnSpawn = false
    window.gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    window.gui.Parent = playerGui
    
    window.main = Instance.new("Frame")
    window.main.Name = "MainFrame"
    window.main.Size = size
    window.main.Position = UDim2.new(0.5, 0, 0.5, 0)
    window.main.AnchorPoint = Vector2.new(0.5, 0.5)
    window.main.BackgroundColor3 = theme == "Dark" and Color3.fromRGB(25, 25, 35) or Color3.fromRGB(245, 245, 245)
    window.main.BorderSizePixel = 0
    window.main.Active = true
    window.main.Draggable = true
    window.main.ZIndex = 1
    window.main.Parent = window.gui
    
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 12)
    mainCorner.Parent = window.main
    
    window.titleBar = Instance.new("Frame")
    window.titleBar.Name = "TitleBar"
    window.titleBar.Size = UDim2.new(1, 0, 0, 60)
    window.titleBar.Position = UDim2.new(0, 0, 0, 0)
    window.titleBar.BackgroundTransparency = 1
    window.titleBar.ZIndex = 2
    window.titleBar.Parent = window.main
    
    window.titleLabel = Instance.new("TextLabel")
    window.titleLabel.Name = "Title"
    window.titleLabel.Size = UDim2.new(1, -100, 0, 30)
    window.titleLabel.Position = UDim2.new(0, 20, 0, 8)
    window.titleLabel.BackgroundTransparency = 1
    window.titleLabel.Text = title
    window.titleLabel.TextColor3 = theme == "Dark" and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(0, 0, 0)
    window.titleLabel.TextSize = 18
    window.titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    window.titleLabel.Font = Enum.Font.GothamBold
    window.titleLabel.ZIndex = 3
    window.titleLabel.Parent = window.titleBar
    
    if subtitle ~= "" then
        window.subtitleLabel = Instance.new("TextLabel")
        window.subtitleLabel.Name = "Subtitle"
        window.subtitleLabel.Size = UDim2.new(1, -100, 0, 18)
        window.subtitleLabel.Position = UDim2.new(0, 20, 0, 35)
        window.subtitleLabel.BackgroundTransparency = 1
        window.subtitleLabel.Text = subtitle
        window.subtitleLabel.TextColor3 = theme == "Dark" and Color3.fromRGB(180, 180, 180) or Color3.fromRGB(100, 100, 100)
        window.subtitleLabel.TextSize = 14
        window.subtitleLabel.TextXAlignment = Enum.TextXAlignment.Left
        window.subtitleLabel.Font = Enum.Font.Gotham
        window.subtitleLabel.ZIndex = 3
        window.subtitleLabel.Parent = window.titleBar
    end
    
    window.closeButton = Instance.new("TextButton")
    window.closeButton.Name = "CloseButton"
    window.closeButton.Size = UDim2.new(0, 40, 0, 40)
    window.closeButton.Position = UDim2.new(1, -50, 0, 10)
    window.closeButton.BackgroundColor3 = Color3.fromRGB(255, 95, 87)
    window.closeButton.BorderSizePixel = 0
    window.closeButton.Text = "Ã—"
    window.closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    window.closeButton.TextSize = 24
    window.closeButton.Font = Enum.Font.GothamBold
    window.closeButton.ZIndex = 3
    window.closeButton.Parent = window.titleBar
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(1, 0)
    closeCorner.Parent = window.closeButton
    
    window.tabContainer = Instance.new("Frame")
    window.tabContainer.Name = "TabContainer"
    window.tabContainer.Size = UDim2.new(1, 0, 1, -60)
    window.tabContainer.Position = UDim2.new(0, 0, 0, 60)
    window.tabContainer.BackgroundTransparency = 1
    window.tabContainer.ZIndex = 2
    window.tabContainer.Parent = window.main
    
    window.tabBar = Instance.new("ScrollingFrame")
    window.tabBar.Name = "TabBar"
    window.tabBar.Size = UDim2.new(0, 160, 1, 0)
    window.tabBar.Position = UDim2.new(0, 0, 0, 0)
    window.tabBar.BackgroundColor3 = theme == "Dark" and Color3.fromRGB(20, 20, 30) or Color3.fromRGB(240, 240, 240)
    window.tabBar.BorderSizePixel = 0
    window.tabBar.ScrollBarThickness = 8
    window.tabBar.CanvasSize = UDim2.new(0, 0, 0, 0)
    window.tabBar.AutomaticCanvasSize = Enum.AutomaticSize.Y
    window.tabBar.ScrollingEnabled = true
    window.tabBar.ZIndex = 3
    window.tabBar.Parent = window.tabContainer
    
    local tabBarCorner = Instance.new("UICorner")
    tabBarCorner.CornerRadius = UDim.new(0, 8)
    tabBarCorner.Parent = window.tabBar
    
    local tabBarLayout = Instance.new("UIListLayout")
    tabBarLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabBarLayout.Padding = UDim.new(0, 8)
    tabBarLayout.Parent = window.tabBar
    
    local tabBarPadding = Instance.new("UIPadding")
    tabBarPadding.PaddingTop = UDim.new(0, 15)
    tabBarPadding.PaddingBottom = UDim.new(0, 15)
    tabBarPadding.PaddingLeft = UDim.new(0, 15)
    tabBarPadding.PaddingRight = UDim.new(0, 15)
    tabBarPadding.Parent = window.tabBar
    
    window.contentArea = Instance.new("Frame")
    window.contentArea.Name = "ContentArea"
    window.contentArea.Size = UDim2.new(1, -170, 1, 0)
    window.contentArea.Position = UDim2.new(0, 170, 0, 0)
    window.contentArea.BackgroundTransparency = 1
    window.contentArea.ZIndex = 3
    window.contentArea.Parent = window.tabContainer
    
    window.tabs = {}
    window.currentTab = nil
    window.theme = theme
    window.isMinimized = false
    window.originalSize = size
    
    window.closeButton.MouseButton1Click:Connect(function()
        window:Destroy()
    end)
    
    window.closeButton.TouchTap:Connect(function()
        window:Destroy()
    end)
    
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == minimizeKey then
            window:ToggleMinimize()
        end
    end)
    
    return window
end

function Window:CreateTab(config)
    config = config or {}
    local title = config.Title or "Tab"
    local icon = config.Icon or ""
    
    local tab = {
        title = title,
        icon = icon,
        content = nil,
        button = nil,
        elements = {}
    }
    
    tab.button = Instance.new("TextButton")
    tab.button.Name = title .. "Tab"
    tab.button.Size = UDim2.new(1, 0, 0, 50)
    tab.button.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    tab.button.BorderSizePixel = 0
    tab.button.Text = "  " .. title
    tab.button.TextColor3 = Color3.fromRGB(200, 200, 200)
    tab.button.TextSize = 16
    tab.button.TextXAlignment = Enum.TextXAlignment.Left
    tab.button.Font = Enum.Font.Gotham
    tab.button.ZIndex = 4
    tab.button.Parent = self.tabBar
    
    local tabCorner = Instance.new("UICorner")
    tabCorner.CornerRadius = UDim.new(0, 6)
    tabCorner.Parent = tab.button
    
    tab.content = Instance.new("ScrollingFrame")
    tab.content.Name = title .. "Content"
    tab.content.Size = UDim2.new(1, 0, 1, 0)
    tab.content.Position = UDim2.new(0, 0, 0, 0)
    tab.content.BackgroundTransparency = 1
    tab.content.BorderSizePixel = 0
    tab.content.ScrollBarThickness = 10
    tab.content.CanvasSize = UDim2.new(0, 0, 0, 0)
    tab.content.AutomaticCanvasSize = Enum.AutomaticSize.Y
    tab.content.ScrollingEnabled = true
    tab.content.Visible = false
    tab.content.ZIndex = 4
    tab.content.Parent = self.contentArea
    
    local contentLayout = Instance.new("UIListLayout")
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Padding = UDim.new(0, 15)
    contentLayout.Parent = tab.content
    
    local contentPadding = Instance.new("UIPadding")
    contentPadding.PaddingTop = UDim.new(0, 20)
    contentPadding.PaddingBottom = UDim.new(0, 20)
    contentPadding.PaddingLeft = UDim.new(0, 20)
    contentPadding.PaddingRight = UDim.new(0, 20)
    contentPadding.Parent = tab.content
    
    tab.button.MouseButton1Click:Connect(function()
        self:SelectTab(tab)
    end)
    
    tab.button.TouchTap:Connect(function()
        self:SelectTab(tab)
    end)
    
    table.insert(self.tabs, tab)
    
    if #self.tabs == 1 then
        self:SelectTab(tab)
    end
    
    return setmetatable(tab, {__index = self:GetTabMethods()})
end

function Window:GetTabMethods()
    local TabMethods = {}
    
    function TabMethods:CreateButton(config)
        config = config or {}
        local title = config.Title or "Button"
        local description = config.Description or ""
        local callback = config.Callback or function() end
        
        local buttonFrame = Instance.new("Frame")
        buttonFrame.Name = title .. "ButtonFrame"
        buttonFrame.Size = UDim2.new(1, 0, 0, description ~= "" and 80 or 55)
        buttonFrame.BackgroundTransparency = 1
        buttonFrame.ZIndex = 5
        buttonFrame.Parent = self.content
        
        local button = Instance.new("TextButton")
        button.Name = title .. "Button"
        button.Size = UDim2.new(1, 0, 0, 50)
        button.BackgroundColor3 = Color3.fromRGB(50, 120, 200)
        button.BorderSizePixel = 0
        button.Text = title
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.TextSize = 16
        button.Font = Enum.Font.GothamMedium
        button.ZIndex = 6
        button.Parent = buttonFrame
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 8)
        buttonCorner.Parent = button
        
        if description ~= "" then
            local desc = Instance.new("TextLabel")
            desc.Size = UDim2.new(1, 0, 0, 25)
            desc.Position = UDim2.new(0, 0, 0, 55)
            desc.BackgroundTransparency = 1
            desc.Text = description
            desc.TextColor3 = Color3.fromRGB(150, 150, 150)
            desc.TextSize = 13
            desc.Font = Enum.Font.Gotham
            desc.ZIndex = 6
            desc.Parent = buttonFrame
        end
        
        button.MouseButton1Click:Connect(function()
            callback()
        end)
        
        button.TouchTap:Connect(function()
            callback()
        end)
        
        return button
    end
    
    function TabMethods:CreateDropdown(name, config)
        config = config or {}
        local title = config.Title or "Dropdown"
        local values = config.Values or {}
        local default = config.Default or ""
        
        local dropdownFrame = Instance.new("Frame")
        dropdownFrame.Name = title .. "DropdownFrame"
        dropdownFrame.Size = UDim2.new(1, 0, 0, 90)
        dropdownFrame.BackgroundTransparency = 1
        dropdownFrame.ZIndex = 5
        dropdownFrame.Parent = self.content
        
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Size = UDim2.new(1, 0, 0, 30)
        titleLabel.BackgroundTransparency = 1
        titleLabel.Text = title
        titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        titleLabel.TextSize = 16
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        titleLabel.Font = Enum.Font.GothamMedium
        titleLabel.ZIndex = 6
        titleLabel.Parent = dropdownFrame
        
        local dropdown = Instance.new("TextButton")
        dropdown.Size = UDim2.new(1, 0, 0, 50)
        dropdown.Position = UDim2.new(0, 0, 0, 35)
        dropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
        dropdown.BorderSizePixel = 0
        dropdown.Text = default ~= "" and default or "Select..."
        dropdown.TextColor3 = Color3.fromRGB(200, 200, 200)
        dropdown.TextSize = 15
        dropdown.TextXAlignment = Enum.TextXAlignment.Left
        dropdown.Font = Enum.Font.Gotham
        dropdown.ClipsDescendants = false
        dropdown.ZIndex = 6
        dropdown.Parent = dropdownFrame
        
        local dropdownCorner = Instance.new("UICorner")
        dropdownCorner.CornerRadius = UDim.new(0, 6)
        dropdownCorner.Parent = dropdown
        
        local dropdownPadding = Instance.new("UIPadding")
        dropdownPadding.PaddingLeft = UDim.new(0, 15)
        dropdownPadding.PaddingRight = UDim.new(0, 40)
        dropdownPadding.Parent = dropdown
        
        local arrow = Instance.new("TextLabel")
        arrow.Size = UDim2.new(0, 30, 1, 0)
        arrow.Position = UDim2.new(1, -35, 0, 0)
        arrow.BackgroundTransparency = 1
        arrow.Text = "â–¼"
        arrow.TextColor3 = Color3.fromRGB(200, 200, 200)
        arrow.TextSize = 14
        arrow.Font = Enum.Font.Gotham
        arrow.ZIndex = 7
        arrow.Parent = dropdown
        
        local dropdownObj = {
            values = values,
            currentValue = default,
            callback = nil,
            isOpen = false,
            listFrame = nil,
            inputConnection = nil
        }
        
        function dropdownObj:SetValues(newValues)
            self.values = newValues or {}
        end
        
        function dropdownObj:OnChanged(callback)
            self.callback = callback
        end
        
        local function closeDropdown()
            if dropdownObj.listFrame then
                dropdownObj.listFrame:Destroy()
                dropdownObj.listFrame = nil
            end
            if dropdownObj.inputConnection then
                pcall(function() dropdownObj.inputConnection:Disconnect() end)
                dropdownObj.inputConnection = nil
            end
            dropdownObj.isOpen = false
            arrow.Text = "â–¼"
            dropdownFrame.Size = UDim2.new(1, 0, 0, 90)
        end
        
        local function openDropdown()
            if dropdownObj.isOpen then 
                closeDropdown()
                return 
            end
            if #dropdownObj.values == 0 then return end
            
            dropdownObj.isOpen = true
            arrow.Text = "â–²"
            
            local itemHeight = 45
            local maxItems = 6
            local actualItems = math.min(#dropdownObj.values, maxItems)
            local listHeight = actualItems * itemHeight
            
            dropdownFrame.Size = UDim2.new(1, 0, 0, 90 + listHeight)
            
            dropdownObj.listFrame = Instance.new("Frame")
            dropdownObj.listFrame.Name = "DropdownList"
            dropdownObj.listFrame.Size = UDim2.new(1, 0, 0, listHeight)
            dropdownObj.listFrame.Position = UDim2.new(0, 0, 0, 55)
            dropdownObj.listFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
            dropdownObj.listFrame.BorderSizePixel = 0
            dropdownObj.listFrame.ZIndex = 100
            dropdownObj.listFrame.Active = true
            dropdownObj.listFrame.Parent = dropdown
            
            local listCorner = Instance.new("UICorner")
            listCorner.CornerRadius = UDim.new(0, 6)
            listCorner.Parent = dropdownObj.listFrame
            
            local scrollFrame = Instance.new("ScrollingFrame")
            scrollFrame.Size = UDim2.new(1, 0, 1, 0)
            scrollFrame.BackgroundTransparency = 1
            scrollFrame.ScrollBarThickness = 8
            scrollFrame.CanvasSize = UDim2.new(0, 0, 0, #dropdownObj.values * itemHeight)
            scrollFrame.ScrollingEnabled = #dropdownObj.values > maxItems
            scrollFrame.ZIndex = 101
            scrollFrame.Active = true
            scrollFrame.Parent = dropdownObj.listFrame
            
            local layout = Instance.new("UIListLayout")
            layout.SortOrder = Enum.SortOrder.LayoutOrder
            layout.Parent = scrollFrame
            
            for i, value in ipairs(dropdownObj.values) do
                local option = Instance.new("TextButton")
                option.Size = UDim2.new(1, 0, 0, itemHeight)
                option.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
                option.BorderSizePixel = 0
                option.Text = "  " .. tostring(value)
                option.TextColor3 = Color3.fromRGB(200, 200, 200)
                option.TextSize = 15
                option.TextXAlignment = Enum.TextXAlignment.Left
                option.Font = Enum.Font.Gotham
                option.LayoutOrder = i
                option.ZIndex = 102
                option.Active = true
                option.Parent = scrollFrame
                
                option.MouseEnter:Connect(function()
                    option.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
                end)
                
                option.MouseLeave:Connect(function()
                    option.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
                end)
                
                local function selectOption()
                    dropdown.Text = tostring(value)
                    dropdownObj.currentValue = value
                    if dropdownObj.callback then
                        dropdownObj.callback(value)
                    end
                    closeDropdown()
                end
                
                option.MouseButton1Click:Connect(selectOption)
                option.TouchTap:Connect(selectOption)
            end
            
            task.wait(0.1)
            local connection
            connection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    local pos = input.Position
                    if not pos then return end
                    local guis = UserInputService:GetGuiObjectsAtPosition(pos.X, pos.Y)
                    local clickedInside = false
                    for _, gui in ipairs(guis) do
                        if gui and (gui:IsDescendantOf(dropdown) or (dropdownObj.listFrame and gui:IsDescendantOf(dropdownObj.listFrame))) then
                            clickedInside = true
                            break
                        end
                    end
                    if not clickedInside then
                        closeDropdown()
                    end
                end
            end)
            dropdownObj.inputConnection = connection
        end
        
        dropdown.MouseButton1Click:Connect(openDropdown)
        dropdown.TouchTap:Connect(openDropdown)
        
        return dropdownObj
    end
    
    return TabMethods
end

function Window:SelectTab(tabOrIndex)
    local tab = tabOrIndex
    if type(tabOrIndex) == "number" then
        tab = self.tabs[tabOrIndex]
    end
    
    if not tab then return end
    
    for _, t in ipairs(self.tabs) do
        t.content.Visible = false
        t.button.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
        t.button.TextColor3 = Color3.fromRGB(200, 200, 200)
    end
    
    tab.content.Visible = true
    tab.button.BackgroundColor3 = Color3.fromRGB(50, 120, 200)
    tab.button.TextColor3 = Color3.fromRGB(255, 255, 255)
    
    self.currentTab = tab
end

function Window:ToggleMinimize()
    self.isMinimized = not self.isMinimized
    
    local targetSize = self.isMinimized and UDim2.fromOffset(self.originalSize.X.Offset, 60) or self.originalSize
    
    local tween = createTween(self.main, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
        Size = targetSize
    })
    
    tween:Play()
    
    self.tabContainer.Visible = not self.isMinimized
end

function Window:Destroy()
    if self.gui then
        self.gui:Destroy()
    end
end

return MashUI
